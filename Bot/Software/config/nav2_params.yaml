amcl:  # Not needed since we are using RTAB-Map, but placeholder if used later
  ros__parameters:
    use_sim_time: false

map_server:
  ros__parameters:
    use_sim_time: false
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: false
    save_map_timeout: 5.0
    free_thresh: 0.25
    occupied_thresh: 0.65
    map_subscribe_transient_local: true

bt_navigator:
  ros__parameters:
    use_sim_time: false
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    global_frame: map
    robot_base_frame: base_link

controller_server:
  ros__parameters:
    use_sim_time: false
    controller_plugins: ["FollowPath"]
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: false
      min_vel_x: 0.0
      max_vel_x: 0.4
      min_vel_theta: -1.5
      max_vel_theta: 1.5
      acc_lim_x: 0.5
      acc_lim_theta: 1.0
      decel_lim_x: -0.5
      decel_lim_theta: -1.0
      vx_samples: 20
      theta_samples: 20
      sim_time: 2.0
      linear_granularity: 0.05
      angular_granularity: 0.05
      xy_goal_tolerance: 0.2
      yaw_goal_tolerance: 0.1
      stop_time_buffer: 0.2
      critic_plugins: ["GoalAlignCritic", "PathAlignCritic", "GoalDistCritic", "ObstacleCritic", "OscillationCritic", "TimeCritic"]
      PathAlign.scale: 32.0
      GoalAlign.scale: 24.0
      RotateToGoal.scale: 32.0
      ObstacleFootprint.scale: 0.02
    
    # Ensures the robot's heading is aligned with the goal orientation.
    # The 'tolerance' defines how close the heading needs to be to consider it aligned.
    GoalAlignCritic:
      plugin: "dwb_critics::GoalAlignCritic"
      tolerance: 0.05

    # Ensures the robot's path is aligned with the goal path.
    # The 'forward_point_distance' defines how far ahead the robot should look to check if it's on the path.
    PathAlignCritic:
      plugin: "dwb_critics::PathAlignCritic"
      forward_point_distance: 0.325

    # Ensures the robot is close enough to the goal.
    # The 'tolerance' defines how close the robot needs to be to the goal to consider it close enough.
    GoalDistCritic:
      plugin: "dwb_critics::GoalDistCritic"
      tolerance: 0.10

    # Ensures the robot is not too close to obstacles.
    # The 'obstacle_range' defines how far the robot should look for obstacles.
    # The 'scaling_factor' defines how much the obstacle cost should be scaled by.
    # The 'costmap_obstacle_range' defines how far the robot should look for obstacles in the costmap.
    ObstacleCritic:
      plugin: "dwb_critics::ObstacleCritic"
      obstacle_range: 2.5
      scaling_factor: 0.75
      costmap_obstacle_range: 2.5

    # Ensures the robot is not oscillating.
    # The 'oscillation_timeout' defines how long the robot should oscillate for to consider it oscillating.
    OscillationCritic:
      plugin: "dwb_critics::OscillationCritic"
      oscillation_timeout: 0.25

    # Ensures the robot is not taking too long to reach the goal.
    # The 'max_time_penalty' defines how much the robot should be penalized for taking too long to reach the goal.
    TimeCritic:
      plugin: "dwb_critics::TimeCritic"
      max_time_penalty: 0.25

planner_server:
  ros__parameters:
    use_sim_time: false
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5

recoveries_server:
  ros__parameters:
    use_sim_time: false
    recovery_plugins: ["spin", "backup", "wait"]
    spin.plugin: "nav2_recoveries/Spin"
    backup.plugin: "nav2_recoveries/BackUp"
    wait.plugin: "nav2_recoveries/Wait"

behavior_server:
  ros__parameters:
    use_sim_time: false
    behavior_plugins: ["spin", "backup", "wait"]
    spin.plugin: "nav2_behaviors/Spin"
    backup.plugin: "nav2_behaviors/BackUp"
    wait.plugin: "nav2_behaviors/Wait"

local_costmap:
  ros__parameters:
    use_sim_time: false
    global_frame: odom
    robot_base_frame: base_link
    update_frequency: 5.0
    publish_frequency: 2.0
    resolution: 0.05
    robot_radius: 0.2  # adjust if using footprint
    plugins: ["obstacle_layer", "inflation_layer"]
    obstacle_layer:
      plugin: "nav2_costmap_2d::ObstacleLayer"
      enabled: true
      observation_sources: laser
      laser:
        topic: scan
        max_obstacle_height: 2.0
        clearing: true
        marking: true
        data_type: "LaserScan"
    inflation_layer:
      plugin: "nav2_costmap_2d::InflationLayer"
      inflation_radius: 0.5

global_costmap:
  ros__parameters:
    use_sim_time: false
    global_frame: map
    robot_base_frame: base_link
    update_frequency: 5.0
    publish_frequency: 2.0
    resolution: 0.05
    robot_radius: 0.2  # adjust if using footprint
    plugins: ["obstacle_layer", "inflation_layer"]
    obstacle_layer:
      plugin: "nav2_costmap_2d::ObstacleLayer"
      enabled: true
      observation_sources: laser
      laser:
        topic: scan
        max_obstacle_height: 2.0
        clearing: true
        marking: true
        data_type: "LaserScan"
    inflation_layer:
      plugin: "nav2_costmap_2d::InflationLayer"
      inflation_radius: 0.5

waypoint_follower:
  ros__parameters:
    use_sim_time: false
    loop_rate: 20
    stop_on_failure: false
